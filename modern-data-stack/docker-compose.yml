services:

  jupyter:
    image: quay.io/jupyter/pyspark-notebook:2024-10-14
    depends_on:
      lakekeeper:
        condition: service_healthy
      trino:
        condition: service_healthy
      superset:
        condition: service_healthy
      pagila_db:
        condition: service_healthy
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./volumes/jupyter/notebooks:/home/jovyan/examples/
    networks:
      infra-data-network:
    ports:
      - "8888:8888"

  minio:
    image: bitnami/minio:latest
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=impacta2025
      - MINIO_API_PORT_NUMBER=9000
      - MINIO_CONSOLE_PORT_NUMBER=9001
      - MINIO_SCHEME=http
      - MINIO_DEFAULT_BUCKETS=raw,trusted,refined
    healthcheck:
      test: [ "CMD", "mc", "ls", "local", "|", "grep", "raw" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 15s
    networks:
      infra-data-network:
    ports:
      - "9000:9000"
      - "9001:9001"

  trino:
    image: trinodb/trino:latest
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:8080/v1/status" ]
      interval: 3s
      timeout: 15s
      retries: 3
      start_period: 15s
    ports:
      - "8084:8080"
      - "8085:8081"
    environment:
      - AWS_ACCESS_KEY_ID=4PRJYFLGzQYTnOJGH1gA
      - AWS_SECRET_ACCESS_KEY=ovBkCsqh2cXNkyoteCzQMV5JWCUk5tHfsG1GwYbD
    volumes:
      - ./configs/trino/etc:/etc/trino
    networks:
      infra-data-network:

  superset:
    build:
      context: ./configs/superset
      dockerfile: Dockerfile
    environment:
      - DATABASE_HOST=superset_db
      - DATABASE_PORT=5432
      - DATABASE_USER=superset_user
      - DATABASE_DB=superset_db
      - DATABASE_PASSWORD=superset_pass
    entrypoint:
      - bash
      - setup.sh
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://localhost:8088/swagger/v1" ]
      interval: 3s
      timeout: 15s
      retries: 3
      start_period: 15s
    depends_on:
      - superset_db
    volumes:
      - ./volumes/superset/superset-data:/app/superset_home
      - ./configs/superset/setup.sh:/app/setup.sh
    ports:
      - '8088:8088'
    networks:
      infra-data-network:

  superset_db:
    image: bitnami/postgresql:16.3.0
    environment:
      - POSTGRES_USER=superset_user
      - POSTGRES_PASSWORD=superset_pass
      - POSTGRES_DB=superset_db
    volumes:
      - ./volumes/superset/superset-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U superset_user -p 5432 -d superset_db" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      infra-data-network:

  lakekeeper:
    image: &lakekeeper-image ${LAKEKEEPER__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: &lakekeeper-pull-policy always
    environment: &lakekeeper-environment
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://lakekeeper_user:lakekeeper_pass@lakekeeper_db:5432/lakekeeper_db
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://lakekeeper_user:lakekeeper_pass@lakekeeper_db:5432/lakekeeper_db
      - LAKEKEEPER__AUTHZ_BACKEND=allowall
    command: [ "serve" ]
    healthcheck:
      test: [ "CMD", "/home/nonroot/iceberg-catalog", "healthcheck" ]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      migrate:
        condition: service_completed_successfully
      lakekeeper_db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      infra-data-network:
    ports:
      - "8181:8181"

  migrate:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://lakekeeper_user:lakekeeper_pass@lakekeeper_db:5432/lakekeeper_db
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://lakekeeper_user:lakekeeper_pass@lakekeeper_db:5432/lakekeeper_db
      - RUST_LOG=info
    restart: "no"
    command: [ "migrate" ]
    depends_on:
      lakekeeper_db:
        condition: service_healthy
    networks:
      infra-data-network:   
  
  bootstrap:
    image: curlimages/curl
    depends_on:
      lakekeeper:
        condition: service_healthy
    restart: "no"
    command:
      - -w
      - "%{http_code}"
      - "-X"
      - "POST"
      - "-v"
      - "http://lakekeeper:8181/management/v1/bootstrap"
      - "-H"
      - "Content-Type: application/json"
      - "--data"
      - '{"accept-terms-of-use": true}'
      - "-o"
      - "/dev/null"
      # - "--fail-with-body"
    networks:
      infra-data-network:
  
  lakekeeper_db:
    image: bitnami/postgresql:16.3.0
    environment:
      - POSTGRES_USER=lakekeeper_user
      - POSTGRES_PASSWORD=lakekeeper_pass
      - POSTGRES_DB=lakekeeper_db
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U lakekeeper_user -p 5432 -d lakekeeper_db" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      infra-data-network:

  nifi:
    image: apache/nifi:latest
    container_name: nifi
    ports:
      - "8443:8443"
    environment:
      - NIFI_WEB_HTTPS_PORT=8443
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=ctsBtRBKHRAx69EqUghvvgEvjnaLjFEB
    volumes:
        - ./configs/nifi/mysql-connector-j-9.3.0.jar:/opt/nifi/nifi-current/lib/mysql-connector-j-9.3.0.jar
        - ./configs/nifi/postgresql-42.7.5.jar:/opt/nifi/nifi-current/lib/postgresql-42.7.5.jar
        - ./configs/nifi/nifi-parquet-nar-2.4.0.nar:/opt/nifi/nifi-current/lib/nifi-parquet-nar-2.4.0.nar
        - ./configs/nifi/nifi-hadoop-libraries-nar-2.4.0.nar:/opt/nifi/nifi-current/lib/nifi-hadoop-libraries-nar-2.4.0.nar
        - ./volumes/nifi/nifi_data:/opt/nifi/nifi-current/data
        - ./volumes/nifi/nifi_logs:/opt/nifi/nifi-current/logs
    restart: unless-stopped
    networks:
      infra-data-network:

  pagila_db:
    image: bitnami/postgresql:16.3.0
    environment:
       POSTGRES_DB: pagila_db
       POSTGRES_USER: pagila_user
       POSTGRES_PASSWORD: pagila_pass
    volumes:
      - ./volumes/pagila/pagila-schema-data.sql:/docker-entrypoint-initdb.d/pagila-schemas-data.sql
      - ./volumes/pagila:/bitnami/postgresql
    ports:
       - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pagila_user -p 5432 -d pagila_db" ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      infra-data-network:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      infra-data-network:

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      infra-data-network:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8083:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      infra-data-network:

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      infra-data-network:

networks:
  infra-data-network: